#!/usr/bin/env bash
# vim: fdm=marker cms=\ #\ %s

set -euo pipefail
set -o errexit
set -o nounset
set -o posix

project=home:mvedovati:katacontainers:images
bsapiurl=https://api.opensuse.org/

usage() # {{{
{
  printf "Usage: $0 {-h| [-A <BS URL>] [-p <BS project>] <git tag>}\n" >&2
cat << EOF

Generate package sources for ${package}.
This tool fetches the package source from git at the specified tag,
generates the spec file and changelog from the template files, and
finally it commits all to the specified OBS project"
EOF
  exit $1
} # }}}

if test $# -lt 1; then
  usage 1
fi

while getopts hp: optname; do
  case $optname in
  A) bsapiurl=$OPTARG ;;
  h) usage 0 ;;
  p) project=$OPTARG ;;
  ?) usage 1 ;;
  esac
done
shift $(($OPTIND - 1))

tag=$1
package=containment-rpm-kata
pkgUrl=https://github.com/marcov/${package}/archive/${tag}.tar.gz
pkgdir=$project/$package
specfile=$package.spec
version=${tag#v}
tarball=$package-$version.tar.gz

osbuilderTag=master
osbuilderUrl=https://github.com/kata-containers/osbuilder/archive/${osbuilderTag}.tar.gz
osbuilderTarball=osbuilder.tar.gz


osc() # {{{
{
  set -eu
  command osc -A $bsapiurl "${1+$@}"
} # }}}
fetch() # {{{
{
  set -eu
  local url=${1?}
  local outname=${2?}
  echo "Fetching ${outname} from $url"
  curl -sSL -o $outname "$url"
} # }}}

install_osbuilder() {
  set -eu
  local installDir=${1?}

  echo "Installing osbuilder..."
  mkdir osbuilder-tmp
  tar -xzf $osbuilderTarball --strip-components=1 -C osbuilder-tmp
  make -C osbuilder-tmp install-scripts  INSTALL_DIR=${installDir}
  rm -rf osbuilder-tmp $osbuilderTarball
}
repack_with_osbuilder() # {{{
{
  set -eu
  local tarball=${1?}
  local dir=${tarball%.tar.gz}
  mkdir $dir
  tar -xzf $tarball --strip-components=1 -C $dir

  install_osbuilder "$(pwd)/$dir/osbuilder"

  tar -czf $tarball $dir
  rm -rf $dir
} # }}}
extract() # {{{
{
  set -eu
  local tarball=${1?}
  local file=${tarball%.tar.gz}/${2?}
  tar -xzf $tarball --strip-components=1 $file
} # }}}
update() # {{{
{
  set -eu
  case $1 in
  *.spec)  update_specfile "$@" ;;
  *.tar.*) update_tarball "$@" ;;
  esac
} # }}}
update_specfile() # {{{
{
  set -eu
  local specfile=${1?} version=${2?}
  sed -r '/^Version:/s/__VERSION__/'$version'/' $specfile.in > $specfile
} # }}}
update_tarball() # {{{
{
  set -eu
  local tarball=${1?} rewrite=0
  if test -f $pkgdir/$tarball; then
    rewrite=1
  fi
  if test 0 -eq $rewrite && test -f $pkgdir/$package-*.tar.gz; then
    osc rm $pkgdir/$package-*.tar.gz
  fi
  mv $tarball $pkgdir
  if test 0 -eq $rewrite; then
    osc add $pkgdir/$tarball
  fi
} # }}}
exithook() # {{{
{
  [ "$?" != "0" ] && echo "Trapped an error...exiting!"
  set -eu
  rm -rf $root
} # }}}

trap exithook EXIT
root=$(mktemp -d)
echo "Running $(basename $0) in root: $root"
cd $root
osc co $pkgdir
fetch "$pkgUrl" $tarball
fetch "$osbuilderUrl" "$osbuilderTarball"
echo "Repacking tarball"
repack_with_osbuilder $tarball
echo "Updating tarball"
update $tarball
cd $pkgdir
extract $tarball $specfile.in
update $specfile $version
#osc build
echo "Pusing to OBS..."
osc ci
